C51 COMPILER V9.56.0.0   WIRELESS                                                          11/23/2017 11:29:50 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE WIRELESS
OBJECT MODULE PLACED IN .\Objects\wireless.obj
COMPILER INVOKED BY: D:\SOFTWARE\keil5\C51\BIN\C51.EXE src\wireless.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\inc) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\wireless.lst) TABS(2) OBJECT(.\Objects\wireless.obj)

line level    source

   1          
   2          
   3          
   4          /******************************
   5          ** @time£»2017/11/10 13:52:57
   6          ** @Author: mantisAlone
   7          ** @email: gxd@cyb-bot.com
   8          ** @brief:
   9          *******************************/ 
  10          
  11          #include "wireless.h"
  12          #include "uart.h"
  13          #include "agreement.h"
  14          #include <stdio.h>
  15          #include "display.h"
  16          
  17          
  18          void CBT_SENSOR_DISPLAY(sensorData sensor);
  19          
  20          
  21          void DealCommumicationUartData(void)
  22          {
  23   1      #define COMMUN_RX_STA  uartRxSta
  24   1      #define COMMUN_RX_BUF  UART_RX_BUF
  25   1      #define COMMUN_RX_COUNT  uartRxCount
  26   1      #define COMMUN_RX_CLEAR clearBuf()
  27   1       zigbeeData* zda; 
  28   1       if(COMMUN_RX_STA)
  29   1        { 
  30   2          //printf("zigbeeData\n");
  31   2        zda = (zigbeeData*)agreementParse(COMMUN_RX_BUF);
  32   2                COMMUN_RX_STA = 0;
  33   2                printf("%s\n",COMMUN_RX_BUF);
  34   2                COMMUN_RX_CLEAR;
  35   2                COMMUN_RX_COUNT = 0;
  36   2               // printf("\n %x \n",zda->sensorDa.sensorType);
  37   2                  display_temp((zda->sensorDa.SensorData[2]<<8)+zda->sensorDa.SensorData[3]);
  38   2                  display_humi((zda->sensorDa.SensorData[0]<<8)+zda->sensorDa.SensorData[1]);
  39   2                  printf("%f\n",(zda->sensorDa.SensorData[0]<<8)+zda->sensorDa.SensorData[1]);
  40   2                
  41   2                  CBT_SENSOR_DISPLAY(zda->sensorDa);
  42   2              
  43   2        }
  44   1        
  45   1      }
  46          
  47          void sentCommumication (u8 netID ,u8* addr,u8 sensorType ,u8 sensorID ,u8 cmd ,u8 len,u8* mdata)
  48          {
  49   1        u8 sentBuf[50];
  50   1        int i;
  51   1        sentBuf[0] = CBT_HEADH;
  52   1        sentBuf[1] = CBT_HEADL;
  53   1        sentBuf[2] = netID;
  54   1        for ( i=0; i<4; i++)
C51 COMPILER V9.56.0.0   WIRELESS                                                          11/23/2017 11:29:50 PAGE 2   

  55   1        {
  56   2          sentBuf[3+i] = addr[i];
  57   2        }
  58   1        sentBuf[17] = sensorType;
  59   1        sentBuf[18] = sensorID;
  60   1        sentBuf[19] = cmd;
  61   1        sentBuf[20] = len;
  62   1        for ( i=0; i<len; i++)
  63   1        {
  64   2          sentBuf[i+21] = mdata[i];
  65   2        }
  66   1        sentBuf[20+len] = 0xff;
  67   1              
  68   1        COMMUNICATION_UART_SENT_STRING(sentBuf);
*** WARNING C275 IN LINE 68 OF src\wireless.c: expression with possibly no effect
  69   1        
  70   1        ///·¢ËÍ¿ØÖÆ
  71   1      }
  72          
  73          void CBT_SENSOR_DISPLAY(sensorData sensor)
  74          {
  75   1          switch (sensor.sensorType)
  76   1                {
  77   2                  case SENSOR_AM231:
  78   2                    display_temp((float)((sensor.SensorData[2]<<8)+sensor.SensorData[3]));
  79   2                    display_humi((float)((sensor.SensorData[0]<<8)+sensor.SensorData[1]));
  80   2                    break;
  81   2                  case SENSOR_RELAY:
  82   2                    display_relay(sensor.SensorData[0]);
  83   2                    break;
  84   2                  case SENSOR_ALARM:
  85   2                    display_alarm(sensor.SensorData[0]);
  86   2                    break;
  87   2                  case SENSOR_FAN:
  88   2                    display_fan_speed(sensor.SensorData[0]);
  89   2                    break;
  90   2                  case SENSOR_DUST:
  91   2                    display_pm((float)((sensor.SensorData[0]<<8)+sensor.SensorData[1]));
  92   2                    break;
  93   2                  case SENSOR_WAVE:
  94   2                    display_distance((float)((sensor.SensorData[0]<<8)+sensor.SensorData[1]));
  95   2                    break;
  96   2                  case SENSOR_LIGHT:
  97   2                    display_light((float)((sensor.SensorData[0]<<8)+sensor.SensorData[1]));
  98   2                    break;
  99   2                  case SENSOR_GAS:
 100   2                    display_smoke((float)((sensor.SensorData[0]<<8)+sensor.SensorData[1]));
 101   2                    break;
 102   2                  case SENSOR_SHAKE:
 103   2                    display_shake((float)((sensor.SensorData[0]<<8)+sensor.SensorData[1]));
 104   2                    break;
 105   2                  default :
 106   2                    break;
 107   2                }
 108   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    605    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----      88
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.56.0.0   WIRELESS                                                          11/23/2017 11:29:50 PAGE 3   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
